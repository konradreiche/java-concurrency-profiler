// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AgentMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AgentMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentMessage_Threads_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentMessage_Threads_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentMessage_Threads_Thread_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentMessage_Threads_Thread_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentMessage_ContendedMonitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentMessage_ContendedMonitor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AgentMessage_2eproto() {
  protobuf_AddDesc_AgentMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AgentMessage.proto");
  GOOGLE_CHECK(file != NULL);
  AgentMessage_descriptor_ = file->message_type(0);
  static const int AgentMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage, jvm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage, contendedmonitor_),
  };
  AgentMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentMessage_descriptor_,
      AgentMessage::default_instance_,
      AgentMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentMessage));
  AgentMessage_Threads_descriptor_ = AgentMessage_descriptor_->nested_type(0);
  static const int AgentMessage_Threads_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads, lifecycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads, thread_),
  };
  AgentMessage_Threads_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentMessage_Threads_descriptor_,
      AgentMessage_Threads::default_instance_,
      AgentMessage_Threads_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentMessage_Threads));
  AgentMessage_Threads_Thread_descriptor_ = AgentMessage_Threads_descriptor_->nested_type(0);
  static const int AgentMessage_Threads_Thread_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, iscontextclassloaderset_),
  };
  AgentMessage_Threads_Thread_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentMessage_Threads_Thread_descriptor_,
      AgentMessage_Threads_Thread::default_instance_,
      AgentMessage_Threads_Thread_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_Threads_Thread, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentMessage_Threads_Thread));
  AgentMessage_ContendedMonitor_descriptor_ = AgentMessage_descriptor_->nested_type(1);
  static const int AgentMessage_ContendedMonitor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_ContendedMonitor, threadid_),
  };
  AgentMessage_ContendedMonitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentMessage_ContendedMonitor_descriptor_,
      AgentMessage_ContendedMonitor::default_instance_,
      AgentMessage_ContendedMonitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_ContendedMonitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMessage_ContendedMonitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentMessage_ContendedMonitor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AgentMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentMessage_descriptor_, &AgentMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentMessage_Threads_descriptor_, &AgentMessage_Threads::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentMessage_Threads_Thread_descriptor_, &AgentMessage_Threads_Thread::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentMessage_ContendedMonitor_descriptor_, &AgentMessage_ContendedMonitor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AgentMessage_2eproto() {
  delete AgentMessage::default_instance_;
  delete AgentMessage_reflection_;
  delete AgentMessage_Threads::default_instance_;
  delete AgentMessage_Threads_reflection_;
  delete AgentMessage_Threads_Thread::default_instance_;
  delete AgentMessage_Threads_Thread_reflection_;
  delete AgentMessage_ContendedMonitor::default_instance_;
  delete AgentMessage_ContendedMonitor_reflection_;
}

void protobuf_AddDesc_AgentMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022AgentMessage.proto\"\354\002\n\014AgentMessage\022\021\n"
    "\ttimestamp\030\001 \002(\t\022\016\n\006jvm_id\030\002 \002(\005\022&\n\007thre"
    "ads\030\003 \001(\0132\025.AgentMessage.Threads\0228\n\020cont"
    "endedMonitor\030\004 \001(\0132\036.AgentMessage.Conten"
    "dedMonitor\032\260\001\n\007Threads\022\021\n\tlifeCycle\030\001 \002("
    "\t\022,\n\006thread\030\002 \003(\0132\034.AgentMessage.Threads"
    ".Thread\032d\n\006Thread\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 "
    "\002(\t\022\020\n\010priority\030\003 \002(\005\022\r\n\005state\030\004 \002(\t\022\037\n\027"
    "isContextClassLoaderSet\030\005 \002(\010\032$\n\020Contend"
    "edMonitor\022\020\n\010threadId\030\001 \002(\005B-\n\027de.fu.pro"
    "filer.protobufB\022AgentMessageProtos", 434);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AgentMessage.proto", &protobuf_RegisterTypes);
  AgentMessage::default_instance_ = new AgentMessage();
  AgentMessage_Threads::default_instance_ = new AgentMessage_Threads();
  AgentMessage_Threads_Thread::default_instance_ = new AgentMessage_Threads_Thread();
  AgentMessage_ContendedMonitor::default_instance_ = new AgentMessage_ContendedMonitor();
  AgentMessage::default_instance_->InitAsDefaultInstance();
  AgentMessage_Threads::default_instance_->InitAsDefaultInstance();
  AgentMessage_Threads_Thread::default_instance_->InitAsDefaultInstance();
  AgentMessage_ContendedMonitor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AgentMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AgentMessage_2eproto {
  StaticDescriptorInitializer_AgentMessage_2eproto() {
    protobuf_AddDesc_AgentMessage_2eproto();
  }
} static_descriptor_initializer_AgentMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AgentMessage_Threads_Thread::kIdFieldNumber;
const int AgentMessage_Threads_Thread::kNameFieldNumber;
const int AgentMessage_Threads_Thread::kPriorityFieldNumber;
const int AgentMessage_Threads_Thread::kStateFieldNumber;
const int AgentMessage_Threads_Thread::kIsContextClassLoaderSetFieldNumber;
#endif  // !_MSC_VER

AgentMessage_Threads_Thread::AgentMessage_Threads_Thread()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentMessage_Threads_Thread::InitAsDefaultInstance() {
}

AgentMessage_Threads_Thread::AgentMessage_Threads_Thread(const AgentMessage_Threads_Thread& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentMessage_Threads_Thread::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscontextclassloaderset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentMessage_Threads_Thread::~AgentMessage_Threads_Thread() {
  SharedDtor();
}

void AgentMessage_Threads_Thread::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void AgentMessage_Threads_Thread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentMessage_Threads_Thread::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentMessage_Threads_Thread_descriptor_;
}

const AgentMessage_Threads_Thread& AgentMessage_Threads_Thread::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentMessage_2eproto();  return *default_instance_;
}

AgentMessage_Threads_Thread* AgentMessage_Threads_Thread::default_instance_ = NULL;

AgentMessage_Threads_Thread* AgentMessage_Threads_Thread::New() const {
  return new AgentMessage_Threads_Thread;
}

void AgentMessage_Threads_Thread::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    priority_ = 0;
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
    iscontextclassloaderset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentMessage_Threads_Thread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }
      
      // required int32 priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_state;
        break;
      }
      
      // required string state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isContextClassLoaderSet;
        break;
      }
      
      // required bool isContextClassLoaderSet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isContextClassLoaderSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscontextclassloaderset_)));
          set_has_iscontextclassloaderset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentMessage_Threads_Thread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }
  
  // required string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->state(), output);
  }
  
  // required bool isContextClassLoaderSet = 5;
  if (has_iscontextclassloaderset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscontextclassloaderset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentMessage_Threads_Thread::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }
  
  // required string state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }
  
  // required bool isContextClassLoaderSet = 5;
  if (has_iscontextclassloaderset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscontextclassloaderset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentMessage_Threads_Thread::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
    // required string state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }
    
    // required bool isContextClassLoaderSet = 5;
    if (has_iscontextclassloaderset()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentMessage_Threads_Thread::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentMessage_Threads_Thread* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentMessage_Threads_Thread*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentMessage_Threads_Thread::MergeFrom(const AgentMessage_Threads_Thread& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_iscontextclassloaderset()) {
      set_iscontextclassloaderset(from.iscontextclassloaderset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentMessage_Threads_Thread::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMessage_Threads_Thread::CopyFrom(const AgentMessage_Threads_Thread& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMessage_Threads_Thread::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AgentMessage_Threads_Thread::Swap(AgentMessage_Threads_Thread* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(priority_, other->priority_);
    std::swap(state_, other->state_);
    std::swap(iscontextclassloaderset_, other->iscontextclassloaderset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentMessage_Threads_Thread::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentMessage_Threads_Thread_descriptor_;
  metadata.reflection = AgentMessage_Threads_Thread_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AgentMessage_Threads::kLifeCycleFieldNumber;
const int AgentMessage_Threads::kThreadFieldNumber;
#endif  // !_MSC_VER

AgentMessage_Threads::AgentMessage_Threads()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentMessage_Threads::InitAsDefaultInstance() {
}

AgentMessage_Threads::AgentMessage_Threads(const AgentMessage_Threads& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentMessage_Threads::SharedCtor() {
  _cached_size_ = 0;
  lifecycle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentMessage_Threads::~AgentMessage_Threads() {
  SharedDtor();
}

void AgentMessage_Threads::SharedDtor() {
  if (lifecycle_ != &::google::protobuf::internal::kEmptyString) {
    delete lifecycle_;
  }
  if (this != default_instance_) {
  }
}

void AgentMessage_Threads::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentMessage_Threads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentMessage_Threads_descriptor_;
}

const AgentMessage_Threads& AgentMessage_Threads::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentMessage_2eproto();  return *default_instance_;
}

AgentMessage_Threads* AgentMessage_Threads::default_instance_ = NULL;

AgentMessage_Threads* AgentMessage_Threads::New() const {
  return new AgentMessage_Threads;
}

void AgentMessage_Threads::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lifecycle()) {
      if (lifecycle_ != &::google::protobuf::internal::kEmptyString) {
        lifecycle_->clear();
      }
    }
  }
  thread_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentMessage_Threads::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lifeCycle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lifecycle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lifecycle().data(), this->lifecycle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thread;
        break;
      }
      
      // repeated .AgentMessage.Threads.Thread thread = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thread()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_thread;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentMessage_Threads::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lifeCycle = 1;
  if (has_lifecycle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lifecycle().data(), this->lifecycle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lifecycle(), output);
  }
  
  // repeated .AgentMessage.Threads.Thread thread = 2;
  for (int i = 0; i < this->thread_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->thread(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentMessage_Threads::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lifeCycle = 1;
  if (has_lifecycle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lifecycle().data(), this->lifecycle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lifecycle(), target);
  }
  
  // repeated .AgentMessage.Threads.Thread thread = 2;
  for (int i = 0; i < this->thread_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->thread(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentMessage_Threads::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lifeCycle = 1;
    if (has_lifecycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lifecycle());
    }
    
  }
  // repeated .AgentMessage.Threads.Thread thread = 2;
  total_size += 1 * this->thread_size();
  for (int i = 0; i < this->thread_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thread(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentMessage_Threads::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentMessage_Threads* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentMessage_Threads*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentMessage_Threads::MergeFrom(const AgentMessage_Threads& from) {
  GOOGLE_CHECK_NE(&from, this);
  thread_.MergeFrom(from.thread_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifecycle()) {
      set_lifecycle(from.lifecycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentMessage_Threads::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMessage_Threads::CopyFrom(const AgentMessage_Threads& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMessage_Threads::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < thread_size(); i++) {
    if (!this->thread(i).IsInitialized()) return false;
  }
  return true;
}

void AgentMessage_Threads::Swap(AgentMessage_Threads* other) {
  if (other != this) {
    std::swap(lifecycle_, other->lifecycle_);
    thread_.Swap(&other->thread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentMessage_Threads::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentMessage_Threads_descriptor_;
  metadata.reflection = AgentMessage_Threads_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AgentMessage_ContendedMonitor::kThreadIdFieldNumber;
#endif  // !_MSC_VER

AgentMessage_ContendedMonitor::AgentMessage_ContendedMonitor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentMessage_ContendedMonitor::InitAsDefaultInstance() {
}

AgentMessage_ContendedMonitor::AgentMessage_ContendedMonitor(const AgentMessage_ContendedMonitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentMessage_ContendedMonitor::SharedCtor() {
  _cached_size_ = 0;
  threadid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentMessage_ContendedMonitor::~AgentMessage_ContendedMonitor() {
  SharedDtor();
}

void AgentMessage_ContendedMonitor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentMessage_ContendedMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentMessage_ContendedMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentMessage_ContendedMonitor_descriptor_;
}

const AgentMessage_ContendedMonitor& AgentMessage_ContendedMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentMessage_2eproto();  return *default_instance_;
}

AgentMessage_ContendedMonitor* AgentMessage_ContendedMonitor::default_instance_ = NULL;

AgentMessage_ContendedMonitor* AgentMessage_ContendedMonitor::New() const {
  return new AgentMessage_ContendedMonitor;
}

void AgentMessage_ContendedMonitor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    threadid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentMessage_ContendedMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 threadId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threadid_)));
          set_has_threadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentMessage_ContendedMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 threadId = 1;
  if (has_threadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->threadid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentMessage_ContendedMonitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 threadId = 1;
  if (has_threadid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->threadid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentMessage_ContendedMonitor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 threadId = 1;
    if (has_threadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threadid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentMessage_ContendedMonitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentMessage_ContendedMonitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentMessage_ContendedMonitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentMessage_ContendedMonitor::MergeFrom(const AgentMessage_ContendedMonitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_threadid()) {
      set_threadid(from.threadid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentMessage_ContendedMonitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMessage_ContendedMonitor::CopyFrom(const AgentMessage_ContendedMonitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMessage_ContendedMonitor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AgentMessage_ContendedMonitor::Swap(AgentMessage_ContendedMonitor* other) {
  if (other != this) {
    std::swap(threadid_, other->threadid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentMessage_ContendedMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentMessage_ContendedMonitor_descriptor_;
  metadata.reflection = AgentMessage_ContendedMonitor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AgentMessage::kTimestampFieldNumber;
const int AgentMessage::kJvmIdFieldNumber;
const int AgentMessage::kThreadsFieldNumber;
const int AgentMessage::kContendedMonitorFieldNumber;
#endif  // !_MSC_VER

AgentMessage::AgentMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentMessage::InitAsDefaultInstance() {
  threads_ = const_cast< ::AgentMessage_Threads*>(&::AgentMessage_Threads::default_instance());
  contendedmonitor_ = const_cast< ::AgentMessage_ContendedMonitor*>(&::AgentMessage_ContendedMonitor::default_instance());
}

AgentMessage::AgentMessage(const AgentMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentMessage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jvm_id_ = 0;
  threads_ = NULL;
  contendedmonitor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentMessage::~AgentMessage() {
  SharedDtor();
}

void AgentMessage::SharedDtor() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
    delete threads_;
    delete contendedmonitor_;
  }
}

void AgentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentMessage_descriptor_;
}

const AgentMessage& AgentMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AgentMessage_2eproto();  return *default_instance_;
}

AgentMessage* AgentMessage::default_instance_ = NULL;

AgentMessage* AgentMessage::New() const {
  return new AgentMessage;
}

void AgentMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    jvm_id_ = 0;
    if (has_threads()) {
      if (threads_ != NULL) threads_->::AgentMessage_Threads::Clear();
    }
    if (has_contendedmonitor()) {
      if (contendedmonitor_ != NULL) contendedmonitor_->::AgentMessage_ContendedMonitor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jvm_id;
        break;
      }
      
      // required int32 jvm_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jvm_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jvm_id_)));
          set_has_jvm_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_threads;
        break;
      }
      
      // optional .AgentMessage.Threads threads = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_threads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_contendedMonitor;
        break;
      }
      
      // optional .AgentMessage.ContendedMonitor contendedMonitor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contendedMonitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contendedmonitor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestamp(), output);
  }
  
  // required int32 jvm_id = 2;
  if (has_jvm_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jvm_id(), output);
  }
  
  // optional .AgentMessage.Threads threads = 3;
  if (has_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->threads(), output);
  }
  
  // optional .AgentMessage.ContendedMonitor contendedMonitor = 4;
  if (has_contendedmonitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contendedmonitor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestamp(), target);
  }
  
  // required int32 jvm_id = 2;
  if (has_jvm_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jvm_id(), target);
  }
  
  // optional .AgentMessage.Threads threads = 3;
  if (has_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->threads(), target);
  }
  
  // optional .AgentMessage.ContendedMonitor contendedMonitor = 4;
  if (has_contendedmonitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->contendedmonitor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // required int32 jvm_id = 2;
    if (has_jvm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jvm_id());
    }
    
    // optional .AgentMessage.Threads threads = 3;
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->threads());
    }
    
    // optional .AgentMessage.ContendedMonitor contendedMonitor = 4;
    if (has_contendedmonitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contendedmonitor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentMessage::MergeFrom(const AgentMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_jvm_id()) {
      set_jvm_id(from.jvm_id());
    }
    if (from.has_threads()) {
      mutable_threads()->::AgentMessage_Threads::MergeFrom(from.threads());
    }
    if (from.has_contendedmonitor()) {
      mutable_contendedmonitor()->::AgentMessage_ContendedMonitor::MergeFrom(from.contendedmonitor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMessage::CopyFrom(const AgentMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_threads()) {
    if (!this->threads().IsInitialized()) return false;
  }
  if (has_contendedmonitor()) {
    if (!this->contendedmonitor().IsInitialized()) return false;
  }
  return true;
}

void AgentMessage::Swap(AgentMessage* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(jvm_id_, other->jvm_id_);
    std::swap(threads_, other->threads_);
    std::swap(contendedmonitor_, other->contendedmonitor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentMessage_descriptor_;
  metadata.reflection = AgentMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
