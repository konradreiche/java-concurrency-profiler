// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgentMessage.proto

#ifndef PROTOBUF_AgentMessage_2eproto__INCLUDED
#define PROTOBUF_AgentMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AgentMessage_2eproto();
void protobuf_AssignDesc_AgentMessage_2eproto();
void protobuf_ShutdownFile_AgentMessage_2eproto();

class AgentMessage;
class AgentMessage_ThreadEvent;
class AgentMessage_MonitorEvent;
class AgentMessage_Thread;

enum AgentMessage_ThreadEvent_EventType {
  AgentMessage_ThreadEvent_EventType_STARTED = 0,
  AgentMessage_ThreadEvent_EventType_ENDED = 1,
  AgentMessage_ThreadEvent_EventType_NONE = 2
};
bool AgentMessage_ThreadEvent_EventType_IsValid(int value);
const AgentMessage_ThreadEvent_EventType AgentMessage_ThreadEvent_EventType_EventType_MIN = AgentMessage_ThreadEvent_EventType_STARTED;
const AgentMessage_ThreadEvent_EventType AgentMessage_ThreadEvent_EventType_EventType_MAX = AgentMessage_ThreadEvent_EventType_NONE;
const int AgentMessage_ThreadEvent_EventType_EventType_ARRAYSIZE = AgentMessage_ThreadEvent_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgentMessage_ThreadEvent_EventType_descriptor();
inline const ::std::string& AgentMessage_ThreadEvent_EventType_Name(AgentMessage_ThreadEvent_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgentMessage_ThreadEvent_EventType_descriptor(), value);
}
inline bool AgentMessage_ThreadEvent_EventType_Parse(
    const ::std::string& name, AgentMessage_ThreadEvent_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgentMessage_ThreadEvent_EventType>(
    AgentMessage_ThreadEvent_EventType_descriptor(), name, value);
}
enum AgentMessage_MonitorEvent_EventType {
  AgentMessage_MonitorEvent_EventType_WAIT = 0,
  AgentMessage_MonitorEvent_EventType_WAITED = 1,
  AgentMessage_MonitorEvent_EventType_NOTIFY_ALL = 2,
  AgentMessage_MonitorEvent_EventType_CONTENDED = 3,
  AgentMessage_MonitorEvent_EventType_ENTERED = 4,
  AgentMessage_MonitorEvent_EventType_NONE = 5
};
bool AgentMessage_MonitorEvent_EventType_IsValid(int value);
const AgentMessage_MonitorEvent_EventType AgentMessage_MonitorEvent_EventType_EventType_MIN = AgentMessage_MonitorEvent_EventType_WAIT;
const AgentMessage_MonitorEvent_EventType AgentMessage_MonitorEvent_EventType_EventType_MAX = AgentMessage_MonitorEvent_EventType_NONE;
const int AgentMessage_MonitorEvent_EventType_EventType_ARRAYSIZE = AgentMessage_MonitorEvent_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgentMessage_MonitorEvent_EventType_descriptor();
inline const ::std::string& AgentMessage_MonitorEvent_EventType_Name(AgentMessage_MonitorEvent_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgentMessage_MonitorEvent_EventType_descriptor(), value);
}
inline bool AgentMessage_MonitorEvent_EventType_Parse(
    const ::std::string& name, AgentMessage_MonitorEvent_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgentMessage_MonitorEvent_EventType>(
    AgentMessage_MonitorEvent_EventType_descriptor(), name, value);
}
enum AgentMessage_Thread_State {
  AgentMessage_Thread_State_NEW = 0,
  AgentMessage_Thread_State_RUNNABLE = 1,
  AgentMessage_Thread_State_BLOCKED = 2,
  AgentMessage_Thread_State_WAITING = 3,
  AgentMessage_Thread_State_TIMED_WAITING = 4,
  AgentMessage_Thread_State_TERMINATED = 5
};
bool AgentMessage_Thread_State_IsValid(int value);
const AgentMessage_Thread_State AgentMessage_Thread_State_State_MIN = AgentMessage_Thread_State_NEW;
const AgentMessage_Thread_State AgentMessage_Thread_State_State_MAX = AgentMessage_Thread_State_TERMINATED;
const int AgentMessage_Thread_State_State_ARRAYSIZE = AgentMessage_Thread_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgentMessage_Thread_State_descriptor();
inline const ::std::string& AgentMessage_Thread_State_Name(AgentMessage_Thread_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgentMessage_Thread_State_descriptor(), value);
}
inline bool AgentMessage_Thread_State_Parse(
    const ::std::string& name, AgentMessage_Thread_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgentMessage_Thread_State>(
    AgentMessage_Thread_State_descriptor(), name, value);
}
// ===================================================================

class AgentMessage_ThreadEvent : public ::google::protobuf::Message {
 public:
  AgentMessage_ThreadEvent();
  virtual ~AgentMessage_ThreadEvent();
  
  AgentMessage_ThreadEvent(const AgentMessage_ThreadEvent& from);
  
  inline AgentMessage_ThreadEvent& operator=(const AgentMessage_ThreadEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentMessage_ThreadEvent& default_instance();
  
  void Swap(AgentMessage_ThreadEvent* other);
  
  // implements Message ----------------------------------------------
  
  AgentMessage_ThreadEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentMessage_ThreadEvent& from);
  void MergeFrom(const AgentMessage_ThreadEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AgentMessage_ThreadEvent_EventType EventType;
  static const EventType STARTED = AgentMessage_ThreadEvent_EventType_STARTED;
  static const EventType ENDED = AgentMessage_ThreadEvent_EventType_ENDED;
  static const EventType NONE = AgentMessage_ThreadEvent_EventType_NONE;
  static inline bool EventType_IsValid(int value) {
    return AgentMessage_ThreadEvent_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    AgentMessage_ThreadEvent_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    AgentMessage_ThreadEvent_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    AgentMessage_ThreadEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return AgentMessage_ThreadEvent_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return AgentMessage_ThreadEvent_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return AgentMessage_ThreadEvent_EventType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .AgentMessage.Thread thread = 1;
  inline int thread_size() const;
  inline void clear_thread();
  static const int kThreadFieldNumber = 1;
  inline const ::AgentMessage_Thread& thread(int index) const;
  inline ::AgentMessage_Thread* mutable_thread(int index);
  inline ::AgentMessage_Thread* add_thread();
  inline const ::google::protobuf::RepeatedPtrField< ::AgentMessage_Thread >&
      thread() const;
  inline ::google::protobuf::RepeatedPtrField< ::AgentMessage_Thread >*
      mutable_thread();
  
  // required .AgentMessage.ThreadEvent.EventType eventType = 2 [default = NONE];
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  inline ::AgentMessage_ThreadEvent_EventType eventtype() const;
  inline void set_eventtype(::AgentMessage_ThreadEvent_EventType value);
  
  // @@protoc_insertion_point(class_scope:AgentMessage.ThreadEvent)
 private:
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::AgentMessage_Thread > thread_;
  int eventtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_AgentMessage_2eproto();
  friend void protobuf_AssignDesc_AgentMessage_2eproto();
  friend void protobuf_ShutdownFile_AgentMessage_2eproto();
  
  void InitAsDefaultInstance();
  static AgentMessage_ThreadEvent* default_instance_;
};
// -------------------------------------------------------------------

class AgentMessage_MonitorEvent : public ::google::protobuf::Message {
 public:
  AgentMessage_MonitorEvent();
  virtual ~AgentMessage_MonitorEvent();
  
  AgentMessage_MonitorEvent(const AgentMessage_MonitorEvent& from);
  
  inline AgentMessage_MonitorEvent& operator=(const AgentMessage_MonitorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentMessage_MonitorEvent& default_instance();
  
  void Swap(AgentMessage_MonitorEvent* other);
  
  // implements Message ----------------------------------------------
  
  AgentMessage_MonitorEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentMessage_MonitorEvent& from);
  void MergeFrom(const AgentMessage_MonitorEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AgentMessage_MonitorEvent_EventType EventType;
  static const EventType WAIT = AgentMessage_MonitorEvent_EventType_WAIT;
  static const EventType WAITED = AgentMessage_MonitorEvent_EventType_WAITED;
  static const EventType NOTIFY_ALL = AgentMessage_MonitorEvent_EventType_NOTIFY_ALL;
  static const EventType CONTENDED = AgentMessage_MonitorEvent_EventType_CONTENDED;
  static const EventType ENTERED = AgentMessage_MonitorEvent_EventType_ENTERED;
  static const EventType NONE = AgentMessage_MonitorEvent_EventType_NONE;
  static inline bool EventType_IsValid(int value) {
    return AgentMessage_MonitorEvent_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    AgentMessage_MonitorEvent_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    AgentMessage_MonitorEvent_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    AgentMessage_MonitorEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return AgentMessage_MonitorEvent_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return AgentMessage_MonitorEvent_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return AgentMessage_MonitorEvent_EventType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .AgentMessage.Thread thread = 1;
  inline bool has_thread() const;
  inline void clear_thread();
  static const int kThreadFieldNumber = 1;
  inline const ::AgentMessage_Thread& thread() const;
  inline ::AgentMessage_Thread* mutable_thread();
  inline ::AgentMessage_Thread* release_thread();
  
  // required .AgentMessage.MonitorEvent.EventType eventType = 2 [default = NONE];
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  inline ::AgentMessage_MonitorEvent_EventType eventtype() const;
  inline void set_eventtype(::AgentMessage_MonitorEvent_EventType value);
  
  // required string monitorClass = 3;
  inline bool has_monitorclass() const;
  inline void clear_monitorclass();
  static const int kMonitorClassFieldNumber = 3;
  inline const ::std::string& monitorclass() const;
  inline void set_monitorclass(const ::std::string& value);
  inline void set_monitorclass(const char* value);
  inline void set_monitorclass(const char* value, size_t size);
  inline ::std::string* mutable_monitorclass();
  inline ::std::string* release_monitorclass();
  
  // required string contextMethod = 4;
  inline bool has_contextmethod() const;
  inline void clear_contextmethod();
  static const int kContextMethodFieldNumber = 4;
  inline const ::std::string& contextmethod() const;
  inline void set_contextmethod(const ::std::string& value);
  inline void set_contextmethod(const char* value);
  inline void set_contextmethod(const char* value, size_t size);
  inline ::std::string* mutable_contextmethod();
  inline ::std::string* release_contextmethod();
  
  // optional int64 monitorId = 5;
  inline bool has_monitorid() const;
  inline void clear_monitorid();
  static const int kMonitorIdFieldNumber = 5;
  inline ::google::protobuf::int64 monitorid() const;
  inline void set_monitorid(::google::protobuf::int64 value);
  
  // optional int32 entryCount = 6;
  inline bool has_entrycount() const;
  inline void clear_entrycount();
  static const int kEntryCountFieldNumber = 6;
  inline ::google::protobuf::int32 entrycount() const;
  inline void set_entrycount(::google::protobuf::int32 value);
  
  // optional int32 waiterCount = 7;
  inline bool has_waitercount() const;
  inline void clear_waitercount();
  static const int kWaiterCountFieldNumber = 7;
  inline ::google::protobuf::int32 waitercount() const;
  inline void set_waitercount(::google::protobuf::int32 value);
  
  // optional int32 notifyWaiterCount = 8;
  inline bool has_notifywaitercount() const;
  inline void clear_notifywaitercount();
  static const int kNotifyWaiterCountFieldNumber = 8;
  inline ::google::protobuf::int32 notifywaitercount() const;
  inline void set_notifywaitercount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:AgentMessage.MonitorEvent)
 private:
  inline void set_has_thread();
  inline void clear_has_thread();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_monitorclass();
  inline void clear_has_monitorclass();
  inline void set_has_contextmethod();
  inline void clear_has_contextmethod();
  inline void set_has_monitorid();
  inline void clear_has_monitorid();
  inline void set_has_entrycount();
  inline void clear_has_entrycount();
  inline void set_has_waitercount();
  inline void clear_has_waitercount();
  inline void set_has_notifywaitercount();
  inline void clear_has_notifywaitercount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::AgentMessage_Thread* thread_;
  ::std::string* monitorclass_;
  ::std::string* contextmethod_;
  int eventtype_;
  ::google::protobuf::int32 entrycount_;
  ::google::protobuf::int64 monitorid_;
  ::google::protobuf::int32 waitercount_;
  ::google::protobuf::int32 notifywaitercount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_AgentMessage_2eproto();
  friend void protobuf_AssignDesc_AgentMessage_2eproto();
  friend void protobuf_ShutdownFile_AgentMessage_2eproto();
  
  void InitAsDefaultInstance();
  static AgentMessage_MonitorEvent* default_instance_;
};
// -------------------------------------------------------------------

class AgentMessage_Thread : public ::google::protobuf::Message {
 public:
  AgentMessage_Thread();
  virtual ~AgentMessage_Thread();
  
  AgentMessage_Thread(const AgentMessage_Thread& from);
  
  inline AgentMessage_Thread& operator=(const AgentMessage_Thread& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentMessage_Thread& default_instance();
  
  void Swap(AgentMessage_Thread* other);
  
  // implements Message ----------------------------------------------
  
  AgentMessage_Thread* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentMessage_Thread& from);
  void MergeFrom(const AgentMessage_Thread& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AgentMessage_Thread_State State;
  static const State NEW = AgentMessage_Thread_State_NEW;
  static const State RUNNABLE = AgentMessage_Thread_State_RUNNABLE;
  static const State BLOCKED = AgentMessage_Thread_State_BLOCKED;
  static const State WAITING = AgentMessage_Thread_State_WAITING;
  static const State TIMED_WAITING = AgentMessage_Thread_State_TIMED_WAITING;
  static const State TERMINATED = AgentMessage_Thread_State_TERMINATED;
  static inline bool State_IsValid(int value) {
    return AgentMessage_Thread_State_IsValid(value);
  }
  static const State State_MIN =
    AgentMessage_Thread_State_State_MIN;
  static const State State_MAX =
    AgentMessage_Thread_State_State_MAX;
  static const int State_ARRAYSIZE =
    AgentMessage_Thread_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return AgentMessage_Thread_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return AgentMessage_Thread_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return AgentMessage_Thread_State_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 priority = 3;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 3;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);
  
  // required .AgentMessage.Thread.State state = 4 [default = NEW];
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::AgentMessage_Thread_State state() const;
  inline void set_state(::AgentMessage_Thread_State value);
  
  // required bool isContextClassLoaderSet = 5;
  inline bool has_iscontextclassloaderset() const;
  inline void clear_iscontextclassloaderset();
  static const int kIsContextClassLoaderSetFieldNumber = 5;
  inline bool iscontextclassloaderset() const;
  inline void set_iscontextclassloaderset(bool value);
  
  // optional int64 cpuTime = 6;
  inline bool has_cputime() const;
  inline void clear_cputime();
  static const int kCpuTimeFieldNumber = 6;
  inline ::google::protobuf::int64 cputime() const;
  inline void set_cputime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:AgentMessage.Thread)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_iscontextclassloaderset();
  inline void clear_has_iscontextclassloaderset();
  inline void set_has_cputime();
  inline void clear_has_cputime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 priority_;
  int state_;
  bool iscontextclassloaderset_;
  ::google::protobuf::int64 cputime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_AgentMessage_2eproto();
  friend void protobuf_AssignDesc_AgentMessage_2eproto();
  friend void protobuf_ShutdownFile_AgentMessage_2eproto();
  
  void InitAsDefaultInstance();
  static AgentMessage_Thread* default_instance_;
};
// -------------------------------------------------------------------

class AgentMessage : public ::google::protobuf::Message {
 public:
  AgentMessage();
  virtual ~AgentMessage();
  
  AgentMessage(const AgentMessage& from);
  
  inline AgentMessage& operator=(const AgentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentMessage& default_instance();
  
  void Swap(AgentMessage* other);
  
  // implements Message ----------------------------------------------
  
  AgentMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentMessage& from);
  void MergeFrom(const AgentMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AgentMessage_ThreadEvent ThreadEvent;
  typedef AgentMessage_MonitorEvent MonitorEvent;
  typedef AgentMessage_Thread Thread;
  
  // accessors -------------------------------------------------------
  
  // required int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // required int32 jvm_id = 2;
  inline bool has_jvm_id() const;
  inline void clear_jvm_id();
  static const int kJvmIdFieldNumber = 2;
  inline ::google::protobuf::int32 jvm_id() const;
  inline void set_jvm_id(::google::protobuf::int32 value);
  
  // optional .AgentMessage.ThreadEvent threadEvent = 3;
  inline bool has_threadevent() const;
  inline void clear_threadevent();
  static const int kThreadEventFieldNumber = 3;
  inline const ::AgentMessage_ThreadEvent& threadevent() const;
  inline ::AgentMessage_ThreadEvent* mutable_threadevent();
  inline ::AgentMessage_ThreadEvent* release_threadevent();
  
  // optional .AgentMessage.MonitorEvent monitorEvent = 4;
  inline bool has_monitorevent() const;
  inline void clear_monitorevent();
  static const int kMonitorEventFieldNumber = 4;
  inline const ::AgentMessage_MonitorEvent& monitorevent() const;
  inline ::AgentMessage_MonitorEvent* mutable_monitorevent();
  inline ::AgentMessage_MonitorEvent* release_monitorevent();
  
  // @@protoc_insertion_point(class_scope:AgentMessage)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_jvm_id();
  inline void clear_has_jvm_id();
  inline void set_has_threadevent();
  inline void clear_has_threadevent();
  inline void set_has_monitorevent();
  inline void clear_has_monitorevent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestamp_;
  ::AgentMessage_ThreadEvent* threadevent_;
  ::AgentMessage_MonitorEvent* monitorevent_;
  ::google::protobuf::int32 jvm_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_AgentMessage_2eproto();
  friend void protobuf_AssignDesc_AgentMessage_2eproto();
  friend void protobuf_ShutdownFile_AgentMessage_2eproto();
  
  void InitAsDefaultInstance();
  static AgentMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// AgentMessage_ThreadEvent

// repeated .AgentMessage.Thread thread = 1;
inline int AgentMessage_ThreadEvent::thread_size() const {
  return thread_.size();
}
inline void AgentMessage_ThreadEvent::clear_thread() {
  thread_.Clear();
}
inline const ::AgentMessage_Thread& AgentMessage_ThreadEvent::thread(int index) const {
  return thread_.Get(index);
}
inline ::AgentMessage_Thread* AgentMessage_ThreadEvent::mutable_thread(int index) {
  return thread_.Mutable(index);
}
inline ::AgentMessage_Thread* AgentMessage_ThreadEvent::add_thread() {
  return thread_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AgentMessage_Thread >&
AgentMessage_ThreadEvent::thread() const {
  return thread_;
}
inline ::google::protobuf::RepeatedPtrField< ::AgentMessage_Thread >*
AgentMessage_ThreadEvent::mutable_thread() {
  return &thread_;
}

// required .AgentMessage.ThreadEvent.EventType eventType = 2 [default = NONE];
inline bool AgentMessage_ThreadEvent::has_eventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentMessage_ThreadEvent::set_has_eventtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentMessage_ThreadEvent::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentMessage_ThreadEvent::clear_eventtype() {
  eventtype_ = 2;
  clear_has_eventtype();
}
inline ::AgentMessage_ThreadEvent_EventType AgentMessage_ThreadEvent::eventtype() const {
  return static_cast< ::AgentMessage_ThreadEvent_EventType >(eventtype_);
}
inline void AgentMessage_ThreadEvent::set_eventtype(::AgentMessage_ThreadEvent_EventType value) {
  GOOGLE_DCHECK(::AgentMessage_ThreadEvent_EventType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
}

// -------------------------------------------------------------------

// AgentMessage_MonitorEvent

// required .AgentMessage.Thread thread = 1;
inline bool AgentMessage_MonitorEvent::has_thread() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_thread() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentMessage_MonitorEvent::clear_has_thread() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentMessage_MonitorEvent::clear_thread() {
  if (thread_ != NULL) thread_->::AgentMessage_Thread::Clear();
  clear_has_thread();
}
inline const ::AgentMessage_Thread& AgentMessage_MonitorEvent::thread() const {
  return thread_ != NULL ? *thread_ : *default_instance_->thread_;
}
inline ::AgentMessage_Thread* AgentMessage_MonitorEvent::mutable_thread() {
  set_has_thread();
  if (thread_ == NULL) thread_ = new ::AgentMessage_Thread;
  return thread_;
}
inline ::AgentMessage_Thread* AgentMessage_MonitorEvent::release_thread() {
  clear_has_thread();
  ::AgentMessage_Thread* temp = thread_;
  thread_ = NULL;
  return temp;
}

// required .AgentMessage.MonitorEvent.EventType eventType = 2 [default = NONE];
inline bool AgentMessage_MonitorEvent::has_eventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_eventtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentMessage_MonitorEvent::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentMessage_MonitorEvent::clear_eventtype() {
  eventtype_ = 5;
  clear_has_eventtype();
}
inline ::AgentMessage_MonitorEvent_EventType AgentMessage_MonitorEvent::eventtype() const {
  return static_cast< ::AgentMessage_MonitorEvent_EventType >(eventtype_);
}
inline void AgentMessage_MonitorEvent::set_eventtype(::AgentMessage_MonitorEvent_EventType value) {
  GOOGLE_DCHECK(::AgentMessage_MonitorEvent_EventType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
}

// required string monitorClass = 3;
inline bool AgentMessage_MonitorEvent::has_monitorclass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_monitorclass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentMessage_MonitorEvent::clear_has_monitorclass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentMessage_MonitorEvent::clear_monitorclass() {
  if (monitorclass_ != &::google::protobuf::internal::kEmptyString) {
    monitorclass_->clear();
  }
  clear_has_monitorclass();
}
inline const ::std::string& AgentMessage_MonitorEvent::monitorclass() const {
  return *monitorclass_;
}
inline void AgentMessage_MonitorEvent::set_monitorclass(const ::std::string& value) {
  set_has_monitorclass();
  if (monitorclass_ == &::google::protobuf::internal::kEmptyString) {
    monitorclass_ = new ::std::string;
  }
  monitorclass_->assign(value);
}
inline void AgentMessage_MonitorEvent::set_monitorclass(const char* value) {
  set_has_monitorclass();
  if (monitorclass_ == &::google::protobuf::internal::kEmptyString) {
    monitorclass_ = new ::std::string;
  }
  monitorclass_->assign(value);
}
inline void AgentMessage_MonitorEvent::set_monitorclass(const char* value, size_t size) {
  set_has_monitorclass();
  if (monitorclass_ == &::google::protobuf::internal::kEmptyString) {
    monitorclass_ = new ::std::string;
  }
  monitorclass_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AgentMessage_MonitorEvent::mutable_monitorclass() {
  set_has_monitorclass();
  if (monitorclass_ == &::google::protobuf::internal::kEmptyString) {
    monitorclass_ = new ::std::string;
  }
  return monitorclass_;
}
inline ::std::string* AgentMessage_MonitorEvent::release_monitorclass() {
  clear_has_monitorclass();
  if (monitorclass_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monitorclass_;
    monitorclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string contextMethod = 4;
inline bool AgentMessage_MonitorEvent::has_contextmethod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_contextmethod() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgentMessage_MonitorEvent::clear_has_contextmethod() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgentMessage_MonitorEvent::clear_contextmethod() {
  if (contextmethod_ != &::google::protobuf::internal::kEmptyString) {
    contextmethod_->clear();
  }
  clear_has_contextmethod();
}
inline const ::std::string& AgentMessage_MonitorEvent::contextmethod() const {
  return *contextmethod_;
}
inline void AgentMessage_MonitorEvent::set_contextmethod(const ::std::string& value) {
  set_has_contextmethod();
  if (contextmethod_ == &::google::protobuf::internal::kEmptyString) {
    contextmethod_ = new ::std::string;
  }
  contextmethod_->assign(value);
}
inline void AgentMessage_MonitorEvent::set_contextmethod(const char* value) {
  set_has_contextmethod();
  if (contextmethod_ == &::google::protobuf::internal::kEmptyString) {
    contextmethod_ = new ::std::string;
  }
  contextmethod_->assign(value);
}
inline void AgentMessage_MonitorEvent::set_contextmethod(const char* value, size_t size) {
  set_has_contextmethod();
  if (contextmethod_ == &::google::protobuf::internal::kEmptyString) {
    contextmethod_ = new ::std::string;
  }
  contextmethod_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AgentMessage_MonitorEvent::mutable_contextmethod() {
  set_has_contextmethod();
  if (contextmethod_ == &::google::protobuf::internal::kEmptyString) {
    contextmethod_ = new ::std::string;
  }
  return contextmethod_;
}
inline ::std::string* AgentMessage_MonitorEvent::release_contextmethod() {
  clear_has_contextmethod();
  if (contextmethod_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contextmethod_;
    contextmethod_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 monitorId = 5;
inline bool AgentMessage_MonitorEvent::has_monitorid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_monitorid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AgentMessage_MonitorEvent::clear_has_monitorid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AgentMessage_MonitorEvent::clear_monitorid() {
  monitorid_ = GOOGLE_LONGLONG(0);
  clear_has_monitorid();
}
inline ::google::protobuf::int64 AgentMessage_MonitorEvent::monitorid() const {
  return monitorid_;
}
inline void AgentMessage_MonitorEvent::set_monitorid(::google::protobuf::int64 value) {
  set_has_monitorid();
  monitorid_ = value;
}

// optional int32 entryCount = 6;
inline bool AgentMessage_MonitorEvent::has_entrycount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_entrycount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AgentMessage_MonitorEvent::clear_has_entrycount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AgentMessage_MonitorEvent::clear_entrycount() {
  entrycount_ = 0;
  clear_has_entrycount();
}
inline ::google::protobuf::int32 AgentMessage_MonitorEvent::entrycount() const {
  return entrycount_;
}
inline void AgentMessage_MonitorEvent::set_entrycount(::google::protobuf::int32 value) {
  set_has_entrycount();
  entrycount_ = value;
}

// optional int32 waiterCount = 7;
inline bool AgentMessage_MonitorEvent::has_waitercount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_waitercount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AgentMessage_MonitorEvent::clear_has_waitercount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AgentMessage_MonitorEvent::clear_waitercount() {
  waitercount_ = 0;
  clear_has_waitercount();
}
inline ::google::protobuf::int32 AgentMessage_MonitorEvent::waitercount() const {
  return waitercount_;
}
inline void AgentMessage_MonitorEvent::set_waitercount(::google::protobuf::int32 value) {
  set_has_waitercount();
  waitercount_ = value;
}

// optional int32 notifyWaiterCount = 8;
inline bool AgentMessage_MonitorEvent::has_notifywaitercount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AgentMessage_MonitorEvent::set_has_notifywaitercount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AgentMessage_MonitorEvent::clear_has_notifywaitercount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AgentMessage_MonitorEvent::clear_notifywaitercount() {
  notifywaitercount_ = 0;
  clear_has_notifywaitercount();
}
inline ::google::protobuf::int32 AgentMessage_MonitorEvent::notifywaitercount() const {
  return notifywaitercount_;
}
inline void AgentMessage_MonitorEvent::set_notifywaitercount(::google::protobuf::int32 value) {
  set_has_notifywaitercount();
  notifywaitercount_ = value;
}

// -------------------------------------------------------------------

// AgentMessage_Thread

// required int32 id = 1;
inline bool AgentMessage_Thread::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentMessage_Thread::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentMessage_Thread::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentMessage_Thread::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AgentMessage_Thread::id() const {
  return id_;
}
inline void AgentMessage_Thread::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool AgentMessage_Thread::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentMessage_Thread::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentMessage_Thread::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentMessage_Thread::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AgentMessage_Thread::name() const {
  return *name_;
}
inline void AgentMessage_Thread::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AgentMessage_Thread::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AgentMessage_Thread::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AgentMessage_Thread::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AgentMessage_Thread::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 priority = 3;
inline bool AgentMessage_Thread::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentMessage_Thread::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentMessage_Thread::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentMessage_Thread::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 AgentMessage_Thread::priority() const {
  return priority_;
}
inline void AgentMessage_Thread::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// required .AgentMessage.Thread.State state = 4 [default = NEW];
inline bool AgentMessage_Thread::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgentMessage_Thread::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgentMessage_Thread::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgentMessage_Thread::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::AgentMessage_Thread_State AgentMessage_Thread::state() const {
  return static_cast< ::AgentMessage_Thread_State >(state_);
}
inline void AgentMessage_Thread::set_state(::AgentMessage_Thread_State value) {
  GOOGLE_DCHECK(::AgentMessage_Thread_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// required bool isContextClassLoaderSet = 5;
inline bool AgentMessage_Thread::has_iscontextclassloaderset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AgentMessage_Thread::set_has_iscontextclassloaderset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AgentMessage_Thread::clear_has_iscontextclassloaderset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AgentMessage_Thread::clear_iscontextclassloaderset() {
  iscontextclassloaderset_ = false;
  clear_has_iscontextclassloaderset();
}
inline bool AgentMessage_Thread::iscontextclassloaderset() const {
  return iscontextclassloaderset_;
}
inline void AgentMessage_Thread::set_iscontextclassloaderset(bool value) {
  set_has_iscontextclassloaderset();
  iscontextclassloaderset_ = value;
}

// optional int64 cpuTime = 6;
inline bool AgentMessage_Thread::has_cputime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AgentMessage_Thread::set_has_cputime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AgentMessage_Thread::clear_has_cputime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AgentMessage_Thread::clear_cputime() {
  cputime_ = GOOGLE_LONGLONG(0);
  clear_has_cputime();
}
inline ::google::protobuf::int64 AgentMessage_Thread::cputime() const {
  return cputime_;
}
inline void AgentMessage_Thread::set_cputime(::google::protobuf::int64 value) {
  set_has_cputime();
  cputime_ = value;
}

// -------------------------------------------------------------------

// AgentMessage

// required int64 timestamp = 1;
inline bool AgentMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 AgentMessage::timestamp() const {
  return timestamp_;
}
inline void AgentMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int32 jvm_id = 2;
inline bool AgentMessage::has_jvm_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentMessage::set_has_jvm_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentMessage::clear_has_jvm_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentMessage::clear_jvm_id() {
  jvm_id_ = 0;
  clear_has_jvm_id();
}
inline ::google::protobuf::int32 AgentMessage::jvm_id() const {
  return jvm_id_;
}
inline void AgentMessage::set_jvm_id(::google::protobuf::int32 value) {
  set_has_jvm_id();
  jvm_id_ = value;
}

// optional .AgentMessage.ThreadEvent threadEvent = 3;
inline bool AgentMessage::has_threadevent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentMessage::set_has_threadevent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentMessage::clear_has_threadevent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentMessage::clear_threadevent() {
  if (threadevent_ != NULL) threadevent_->::AgentMessage_ThreadEvent::Clear();
  clear_has_threadevent();
}
inline const ::AgentMessage_ThreadEvent& AgentMessage::threadevent() const {
  return threadevent_ != NULL ? *threadevent_ : *default_instance_->threadevent_;
}
inline ::AgentMessage_ThreadEvent* AgentMessage::mutable_threadevent() {
  set_has_threadevent();
  if (threadevent_ == NULL) threadevent_ = new ::AgentMessage_ThreadEvent;
  return threadevent_;
}
inline ::AgentMessage_ThreadEvent* AgentMessage::release_threadevent() {
  clear_has_threadevent();
  ::AgentMessage_ThreadEvent* temp = threadevent_;
  threadevent_ = NULL;
  return temp;
}

// optional .AgentMessage.MonitorEvent monitorEvent = 4;
inline bool AgentMessage::has_monitorevent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgentMessage::set_has_monitorevent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgentMessage::clear_has_monitorevent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgentMessage::clear_monitorevent() {
  if (monitorevent_ != NULL) monitorevent_->::AgentMessage_MonitorEvent::Clear();
  clear_has_monitorevent();
}
inline const ::AgentMessage_MonitorEvent& AgentMessage::monitorevent() const {
  return monitorevent_ != NULL ? *monitorevent_ : *default_instance_->monitorevent_;
}
inline ::AgentMessage_MonitorEvent* AgentMessage::mutable_monitorevent() {
  set_has_monitorevent();
  if (monitorevent_ == NULL) monitorevent_ = new ::AgentMessage_MonitorEvent;
  return monitorevent_;
}
inline ::AgentMessage_MonitorEvent* AgentMessage::release_monitorevent() {
  clear_has_monitorevent();
  ::AgentMessage_MonitorEvent* temp = monitorevent_;
  monitorevent_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AgentMessage_ThreadEvent_EventType>() {
  return ::AgentMessage_ThreadEvent_EventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AgentMessage_MonitorEvent_EventType>() {
  return ::AgentMessage_MonitorEvent_EventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AgentMessage_Thread_State>() {
  return ::AgentMessage_Thread_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AgentMessage_2eproto__INCLUDED
